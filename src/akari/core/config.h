/******  AUTO GENERATED BY akari-configure ******/
#pragma once
#include <type_traits>
namespace akari {
    template<typename Float, int N> struct Color;
    template <typename Float_, typename Spectrum_> struct Config;
#define AKR_CORE_STRUCT(Name) template struct Name<float>;
#define AKR_CORE_CLASS(Name) template class Name<float>;
#define AKR_RENDER_STRUCT(Name) template struct Name<Config<float, Color<float, 3>>>;
#define AKR_RENDER_CLASS(Name) template class Name<Config<float, Color<float, 3>>>;
template<typename C>constexpr const char * get_variant_string(){
    if constexpr(std::is_same_v<Config<float,Color<float, 3>>, C>)return "rgb";
    return "unknown";
}
#define AKR_INVOKE_VARIANT(variant, func, ...) ([&](){\
    if (variant == "rgb")\
        return func<Config<float, Color<float, 3>>>(__VA_ARGS__);\
    throw std::runtime_error("unsupported variant");\
})()
constexpr const char * default_variant = "rgb";
constexpr const char * enabled_variants[] = {"rgb"};
}